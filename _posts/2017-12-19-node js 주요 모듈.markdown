---
layout: post
title:  "Node.js time-end, util "
date:   2017-12-19 16:22:59
author: 박성훈
categories: Node.js
---


#### 주요 모듈

- console
- util



#### console

1. time-end : 지정한 구간(?)의 실행 시간을 알 수 있음

   ```javascript
   console.time('TIMER'); //시작 
   let sum = 0;
   for (let i = 1; i<10000; i++) {
       sum += i;
   }
   console.log(sum);
   console.timeEnd('TIMER'); // 끝
   ```

2. Console 객체를 이용해서 log를 파일로 확인해 볼 수 있음
   이를 활용해서 서버에서 Log를 관리할 수 있다.

   ```javascript
   const fs = require('fs'); //파일 객체 생성
   const output = fs.createWriteStream('stdout.log'); //stdout -> 기본으로 찍는 로그
   const errorOutput = fs.createWriteStream('error.log'); // error -> 에러, 경고 찍는 로그

   const Console = require('console').Console;
   const logger = new Console(output, errorOutput); // 콘솔 객체 생성

   logger.info('info message');
   logger.log('log message');

   // 위 문장을 실행하면 stdout.js라는 파일이 생성 됨.

   logger.warn('warning');
   logger.error('error message');

   // 위 문장을 실행하면 error.js라는 파일이 생성 됨.
   ```

   ​



#### util

1. 숫자, 문자 표현식

   ```javascript
   const util = require('util');

   const str1 = util.format('%d + %d = %d', 1,2, (1+2));
   console.log(str1);

   const str2 = util.format('%s %s', 'hello', 'world');
   console.log(str2);

   ```

2. 상속!!! 자바의 상속을 구현하려면 util의 inherit 함수를 사용합니다.

   ```javascript
   const util = require('util');
   function Parent(){

   }
   Parent.prototype.sayHello = function(){
       console.log('Hello World, from Parent!');
   }
   const obj = new Parent();
   obj.sayHello();

   function Child() {

   }
   util.inherits(Child, Parent); //상속 (상속 받을 객체, 상속 대상 객체)
   const obj2 = new Child();
   obj2.sayHello(); // 부모의 sayHello 함수 사용
   ```

   ​
